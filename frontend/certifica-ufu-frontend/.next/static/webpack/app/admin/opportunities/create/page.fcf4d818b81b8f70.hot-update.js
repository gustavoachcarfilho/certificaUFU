"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/admin/opportunities/create/page",{

/***/ "(app-pages-browser)/./lib/api.ts":
/*!********************!*\
  !*** ./lib/api.ts ***!
  \********************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   applyToOpportunity: () => (/* binding */ applyToOpportunity),\n/* harmony export */   createCertificate: () => (/* binding */ createCertificate),\n/* harmony export */   createOpportunity: () => (/* binding */ createOpportunity),\n/* harmony export */   getAllOpportunities: () => (/* binding */ getAllOpportunities),\n/* harmony export */   getCertificateViewUrl: () => (/* binding */ getCertificateViewUrl),\n/* harmony export */   getMyCertificates: () => (/* binding */ getMyCertificates),\n/* harmony export */   getPendingCertificates: () => (/* binding */ getPendingCertificates),\n/* harmony export */   login: () => (/* binding */ login),\n/* harmony export */   registerUser: () => (/* binding */ registerUser),\n/* harmony export */   validateCertificate: () => (/* binding */ validateCertificate)\n/* harmony export */ });\n// This file will centralize all API calls.\n// The base URL of your Spring Boot backend API.\nconst API_URL = 'http://localhost:8080';\n/**\r\n * Performs a login request to the backend.\r\n * @param email - The user's email.\r\n * @param password - The user's password.\r\n * @returns A promise that resolves with the login response data.\r\n */ const login = async (email, password)=>{\n    const response = await fetch(\"\".concat(API_URL, \"/auth/login\"), {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            email,\n            password\n        })\n    });\n    if (!response.ok) {\n        // Throws an error if the server response is not successful.\n        throw new Error('Falha no login. Verifique suas credenciais.');\n    }\n    // Parses the JSON response from the server.\n    return response.json();\n};\nconst applyToOpportunity = async (opportunityId)=>{\n    const token = localStorage.getItem('authToken');\n    const response = await fetch(\"\".concat(API_URL, \"/opportunity/\").concat(opportunityId, \"/apply\"), {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': \"Bearer \".concat(token)\n        }\n    });\n    if (!response.ok) {\n        throw new Error('Falha ao se candidatar à oportunidade.');\n    }\n    return response.json();\n};\nconst validateCertificate = async (certificateId, status, rejectionReason)=>{\n    const token = localStorage.getItem('authToken');\n    const body = {\n        status,\n        rejectionReason\n    };\n    const response = await fetch(\"\".concat(API_URL, \"/certificate/\").concat(certificateId, \"/validate\"), {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': \"Bearer \".concat(token)\n        },\n        body: JSON.stringify(body)\n    });\n    if (!response.ok) {\n        throw new Error('Falha ao validar o certificado.');\n    }\n    return response.json();\n};\nconst getPendingCertificates = async ()=>{\n    const token = localStorage.getItem('authToken');\n    const response = await fetch(\"\".concat(API_URL, \"/certificate\"), {\n        method: 'GET',\n        headers: {\n            'Authorization': \"Bearer \".concat(token)\n        }\n    });\n    if (!response.ok) {\n        throw new Error('Falha ao buscar certificados.');\n    }\n    const allCerts = await response.json();\n    // Filter for pending certificates on the client-side for now\n    return allCerts.filter((cert)=>cert.status === 'PENDING');\n};\nconst createCertificate = async (certificateData, file)=>{\n    const token = localStorage.getItem('authToken');\n    // FormData is used to send files and data together.\n    const formData = new FormData();\n    // The backend expects a JSON part named \"request\". We must create a Blob for it.\n    formData.append('request', new Blob([\n        JSON.stringify(certificateData)\n    ], {\n        type: 'application/json'\n    }));\n    // The backend expects a file part named \"file\".\n    formData.append('file', file);\n    const response = await fetch(\"\".concat(API_URL, \"/certificate\"), {\n        method: 'POST',\n        headers: {\n            // For multipart/form-data, we don't set Content-Type. The browser does it automatically.\n            'Authorization': \"Bearer \".concat(token)\n        },\n        body: formData\n    });\n    if (!response.ok) {\n        // Attempt to get more detailed error info from the response body\n        const errorData = await response.json().catch(()=>({\n                message: 'Falha ao criar o certificado.'\n            }));\n        throw new Error(errorData.message || 'Falha ao criar o certificado.');\n    }\n    return response.json();\n};\nconst getMyCertificates = async ()=>{\n    const token = localStorage.getItem('authToken');\n    const response = await fetch(\"\".concat(API_URL, \"/certificate/my-documents\"), {\n        method: 'GET',\n        headers: {\n            'Authorization': \"Bearer \".concat(token)\n        }\n    });\n    if (!response.ok) {\n        throw new Error('Falha ao buscar os documentos.');\n    }\n    return response.json();\n};\nconst createOpportunity = async (opportunityData)=>{\n    const token = localStorage.getItem('authToken');\n    const response = await fetch(\"\".concat(API_URL, \"/opportunity\"), {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': \"Bearer \".concat(token)\n        },\n        body: JSON.stringify(opportunityData)\n    });\n    if (!response.ok) {\n        throw new Error('Falha ao criar a oportunidade.');\n    }\n    return response.json();\n};\nconst getAllOpportunities = async ()=>{\n    const token = localStorage.getItem('authToken');\n    const response = await fetch(\"\".concat(API_URL, \"/opportunity\"), {\n        method: 'GET',\n        headers: {\n            'Authorization': \"Bearer \".concat(token)\n        }\n    });\n    if (!response.ok) {\n        throw new Error('Falha ao buscar as oportunidades.');\n    }\n    return response.json();\n};\nconst getCertificateViewUrl = async (certificateId)=>{\n    const token = localStorage.getItem('authToken');\n    const response = await fetch(\"\".concat(API_URL, \"/certificate/\").concat(certificateId, \"/view-url\"), {\n        method: 'GET',\n        headers: {\n            'Authorization': \"Bearer \".concat(token)\n        }\n    });\n    if (!response.ok) {\n        throw new Error('Falha ao obter a URL do documento.');\n    }\n    const data = await response.json();\n    return data.url; // A API retorna { \"url\": \"...\" }\n};\nconst registerUser = async (userData)=>{\n    // Agora a função simplesmente envia os dados que recebe, incluindo a role.\n    const response = await fetch(\"\".concat(API_URL, \"/auth/register\"), {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(userData)\n    });\n    if (!response.ok) {\n        if (response.status === 400) {\n            throw new Error('Email ou CPF já cadastrado.');\n        }\n        throw new Error('Falha ao tentar realizar o cadastro.');\n    }\n    return;\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/api.ts\n"));

/***/ })

});